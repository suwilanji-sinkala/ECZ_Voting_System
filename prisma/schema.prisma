generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Candidates {
  Candidate_ID       Int                  @id @default(autoincrement())
  FirstName          String
  LastName           String
  Othername          String?
  AliasName          String?
  Party_ID           Int?
  Ward_Code          String?
  Position_ID        Int?
  Image              Bytes?
  Positions          Positions?           @relation(fields: [Position_ID], references: [Position_ID], onDelete: NoAction, onUpdate: NoAction)
  Wards              Wards?               @relation(fields: [Ward_Code], references: [Ward_Code], onDelete: NoAction, onUpdate: NoAction)
  Parties            Parties?             @relation(fields: [Party_ID], references: [Party_ID], onDelete: NoAction, onUpdate: NoAction)
  ElectionCandidates ElectionCandidates[]
  Votes              Votes[]

  @@unique([Position_ID, Ward_Code, Party_ID], map: "sqlite_autoindex_Candidates_1")
}

model Constituencies {
  Constituency_Code Int         @id @default(autoincrement())
  Constituency_Name String?
  District_Code     String?
  Districts         Districts?  @relation(fields: [District_Code], references: [District_Code], onDelete: NoAction, onUpdate: NoAction)
  Elections         Elections[]
  Wards             Wards[]
}

model Districts {
  id             Int              @id @unique(map: "sqlite_autoindex_Districts_1") @default(autoincrement())
  District_Code  String           @unique(map: "sqlite_autoindex_Districts_2")
  District_Name  String
  Province_Code  Int?
  Constituencies Constituencies[]
  Provinces      Provinces?       @relation(fields: [Province_Code], references: [Province_Code], onDelete: NoAction, onUpdate: NoAction)
  Elections      Elections[]
}

model ElectionCandidates {
  id         Int         @id @default(autoincrement())
  Election   Int?
  Candidate  Int?
  Elections  Elections?  @relation(fields: [Election], references: [Election_ID], onDelete: NoAction, onUpdate: NoAction)
  Candidates Candidates? @relation(fields: [Candidate], references: [Candidate_ID], onDelete: NoAction, onUpdate: NoAction)

  @@unique([Election, Candidate], map: "sqlite_autoindex_ElectionCandidates_1")
}

model ElectionPositions {
  id        Int        @id @default(autoincrement())
  Election  Int?
  Position  Int?
  Positions Positions? @relation(fields: [Position], references: [Position_ID], onDelete: NoAction, onUpdate: NoAction)
  Elections Elections? @relation(fields: [Election], references: [Election_ID], onDelete: NoAction, onUpdate: NoAction)
}

model Election_Voters {
  ID         Int        @id @default(autoincrement())
  Voter      Int?
  ElectionID Int?
  Elections  Elections? @relation(fields: [ElectionID], references: [Election_ID], onDelete: NoAction, onUpdate: NoAction)
}

model Elections {
  Election_ID        Int                  @id @default(autoincrement())
  title              String
  Description        String?
  StartDate          String
  EndDate            String
  Status             String
  Year               Int
  Election_Type      String
  Province_Code      Int?
  District_Code      String?
  Constituency_Code  Int?
  Ward_Code          String?
  ElectionCandidates ElectionCandidates[]
  ElectionPositions  ElectionPositions[]
  Election_Voters    Election_Voters[]
  Wards              Wards?               @relation(fields: [Ward_Code], references: [Ward_Code], onDelete: NoAction, onUpdate: NoAction)
  Constituencies     Constituencies?      @relation(fields: [Constituency_Code], references: [Constituency_Code], onDelete: NoAction, onUpdate: NoAction)
  Districts          Districts?           @relation(fields: [District_Code], references: [District_Code], onDelete: NoAction, onUpdate: NoAction)
  Provinces          Provinces?           @relation(fields: [Province_Code], references: [Province_Code], onDelete: NoAction, onUpdate: NoAction)
  Votes              Votes[]
}

model Levels {
  Level_Id Int @id @default(autoincrement())
  Name     Int @unique(map: "sqlite_autoindex_Levels_1")
}

model ManagementUsers {
  id           String   @id @default(uuid())
  employeeId   String   @unique
  firstName    String
  lastName     String
  email        String   @unique
  passwordHash String
  role         String   @default("admin") // admin, supervisor, operator
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Parties {
  Party_ID      Int          @id @default(autoincrement())
  Party_Name    String       @unique(map: "sqlite_autoindex_Parties_1")
  Party_Acronym String?      @unique(map: "sqlite_autoindex_Parties_2")
  Slogan        String?
  Candidates    Candidates[]
}

model Positions {
  Position_ID       Int                 @id @default(autoincrement())
  Position_Name     String              @unique(map: "sqlite_autoindex_Positions_1")
  Candidates        Candidates[]
  ElectionPositions ElectionPositions[]
}

model Provinces {
  Province_Code Int         @id @default(autoincrement())
  Province_Name String?     @unique(map: "sqlite_autoindex_Provinces_1")
  Districts     Districts[]
  Elections     Elections[]
}

model Voters {
  First_Name   String
  Last_Name    String
  NRC          String  @unique(map: "sqlite_autoindex_Voters_1")
  Ward         String
  Constituency String
  Email        String?
  id           String  @id
  passwordHash String
  Wards        Wards   @relation(fields: [Ward], references: [Ward_Code], onDelete: NoAction, onUpdate: NoAction)
  Votes        Votes[]
}

model Votes {
  Vote_ID      Int         @id @default(autoincrement())
  Candidate_ID Int?
  Ward_Code    String?
  Election_ID  Int?
  Vote_Hash    String?     @unique(map: "sqlite_autoindex_Votes_1")
  Voters_ID    String?
  Elections    Elections?  @relation(fields: [Election_ID], references: [Election_ID], onDelete: NoAction, onUpdate: NoAction)
  Wards        Wards?      @relation(fields: [Ward_Code], references: [Ward_Code], onDelete: NoAction, onUpdate: NoAction)
  Candidates   Candidates? @relation(fields: [Candidate_ID], references: [Candidate_ID], onDelete: NoAction, onUpdate: NoAction)
  Voters       Voters?     @relation(fields: [Voters_ID], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Wards {
  id                Int             @id @unique(map: "sqlite_autoindex_Wards_1") @default(autoincrement())
  Ward_Code         String          @unique(map: "sqlite_autoindex_Wards_2")
  Ward_Name         String
  Constituency_Code Int?
  Candidates        Candidates[]
  Elections         Elections[]
  Voters            Voters[]
  Votes             Votes[]
  Constituencies    Constituencies? @relation(fields: [Constituency_Code], references: [Constituency_Code], onDelete: NoAction, onUpdate: NoAction)
}

model AuditLogs {
  id            Int      @id @default(autoincrement())
  action        String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, VOTE_SUBMIT
  tableName     String   // Name of the database table affected
  recordId      String?  // ID of the affected record
  userId        String?  // ID of the user performing the action
  userType      String?  // 'management', 'voter', 'system'
  ipAddress     String?  // IP address of the user
  userAgent     String?  // User agent string
  oldValues     String?  // JSON string of old values (for updates/deletes)
  newValues     String?  // JSON string of new values (for creates/updates)
  changes       String?  // JSON string of specific changes made
  blockchainTxHash String? // Transaction hash if blockchain operation
  status        String   @default("success") // success, failed, pending
  errorMessage  String?  // Error message if operation failed
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())
  
  @@index([action])
  @@index([tableName])
  @@index([userId])
  @@index([timestamp])
}
